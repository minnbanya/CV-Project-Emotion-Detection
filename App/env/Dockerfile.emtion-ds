FROM nvcr.io/nvidia/deepstream:6.4-gc-triton-devel

ARG DEBIAN_FRONTEND=interactive
ENV TZ="Asia/Bangkok"

ENV DEPS_INSTALLED_DIR /home/Programs
ENV NVIDIA_DRIVER_CAPABILITIES $NVIDIA_DRIVER_CAPABILITIES,video

RUN apt-get update && apt-get install -y --allow-downgrades --no-install-recommends \
    libssl-dev libmysql++-dev vlc libvlc-dev libvlccore-dev \
    git zlib1g-dev make g++ build-essential cmake zip unzip nano \
    pkg-config autoconf automake libtool uuid-dev \
    iputils-tracepath libprotobuf-dev libleveldb-dev \
    libhdf5-serial-dev protobuf-compiler libgflags-dev \
    libgoogle-glog-dev liblmdb-dev libatlas-base-dev \
    libboost-all-dev libsnappy-dev vim libyaml-cpp-dev \
    iproute2 iputils-ping net-tools lsb-release libgtest-dev \
    libboost-thread-dev libboost-python-dev libboost-regex-dev \
    libcudnn8=8.9.7.29-1+cuda12.2 libcudnn8-dev=8.9.7.29-1+cuda12.2 locales \
    && apt-get autoremove -y \
    && apt-get clean

RUN add-apt-repository universe

RUN apt-get update && apt-get install -y --no-install-recommends \
    qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools \
    libvtk9-dev libjpeg-dev libwebp-dev libpng-dev \
    libtiff5-dev libopenexr-dev libgdal-dev libdc1394-dev \
    libavcodec-dev libavformat-dev libswscale-dev libtheora-dev \
    libvorbis-dev libxvidcore-dev libx264-dev yasm libxine2-dev \
    libopencore-amrnb-dev libopencore-amrwb-dev libv4l-dev \
    libtbb-dev libeigen3-dev flake8 default-jdk doxygen \
    libharfbuzz-dev xfonts-thai \
    && apt-get autoremove -y \
    && apt-get clean

# Clone and build DeepStream Python Apps and DeepStream YOLO plugin
RUN cd /opt/nvidia/deepstream/deepstream-6.4 && \
    git clone https://github.com/NVIDIA-AI-IOT/yolov4_deepstream && \
    mv /opt/nvidia/deepstream/deepstream-6.4/yolov4_deepstream/deepstream_yolo /opt/nvidia/deepstream/deepstream-6.4/sources && \
    rm -rf yolov4_deepstream && \
    cd /opt/nvidia/deepstream/deepstream-6.4/sources/deepstream_yolo/nvdsinfer_custom_impl_Yolo && \
    sed -i 's/NUM_CLASSES_YOLO = 80/NUM_CLASSES_YOLO = 2/' nvdsparsebbox_Yolo.cpp && \
    CUDA_VER=12.2 make && \
    cp libnvdsinfer_custom_impl_Yolo.so /usr/local/lib

# DeepStream YOLO plugin for YOLOv8 model
RUN cd /opt/nvidia/deepstream/deepstream-6.4 && \
    git clone https://github.com/marcoslucianops/DeepStream-Yolo.git && \
    cp -r /opt/nvidia/deepstream/deepstream-6.4/DeepStream-Yolo/nvdsinfer_custom_impl_Yolo /opt/nvidia/deepstream/deepstream-6.4/sources/deepstream_yolo/nvdsinfer_custom_impl_Yolov8 && \
    rm -rf DeepStream-Yolo && \
    cd /opt/nvidia/deepstream/deepstream-6.4/sources/deepstream_yolo/nvdsinfer_custom_impl_Yolov8 && \
    CUDA_VER=12.2 make

RUN cd /opt/nvidia/deepstream/deepstream && \
    echo "####################################" && \
    echo "Downloading necessary pre-requisites" && \
    echo "####################################" && \
    apt-get update && \
    apt-get install -y gstreamer1.0-libav
    
RUN apt-get install --reinstall -y gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly libswresample-dev libavutil-dev libavutil56 libavcodec-dev libavcodec58 libavformat-dev libavformat58 libavfilter7 libde265-dev libde265-0 libx264-dev libx265-dev libvpx-dev libmpeg2encpp-2.1-0 libmpeg2-4 libmpg123-0 

RUN apt-get install -y python3-gi python3-dev python3-gst-1.0 python-gi-dev git python3 python3-pip meson ninja-build python3.8-dev cmake g++ build-essential libglib2.0-dev libglib2.0-dev-bin libgstreamer1.0-dev libtool m4 autoconf automake libgirepository1.0-dev libcairo2-dev

RUN apt-get purge -y python2
RUN ln -s /usr/bin/python3 /usr/bin/python

RUN apt-get install -y sudo nano

RUN apt install python3-gi python3-dev python3-gst-1.0 python-gi-dev git meson \
python3 python3-pip python3.10-dev cmake g++ build-essential libglib2.0-dev \
libglib2.0-dev-bin libgstreamer1.0-dev libtool m4 autoconf automake libgirepository1.0-dev libcairo2-dev

RUN apt-get install -y apt-transport-https ca-certificates -y && update-ca-certificates

RUN cd /opt/nvidia/deepstream/deepstream/sources && \
    git clone -b master https://github.com/NVIDIA-AI-IOT/deepstream_python_apps.git && \
    cd deepstream_python_apps && \
    git checkout 36fdc7ef216d6c4255c6c5931f4adea6f1a1ef0a && \
    git submodule update --init && \
    cd /opt/nvidia/deepstream/deepstream-6.4/sources/deepstream_python_apps/3rdparty/gstreamer/subprojects/gst-python/ && \
    meson build && \
    meson configure && \
    cd build && \
    ninja && \
    ninja install

# COPY bindings/*.cpp /opt/nvidia/deepstream/deepstream-6.4/sources/deepstream_python_apps/bindings/src/
# COPY bindings/*.h /opt/nvidia/deepstream/deepstream-6.4/sources/deepstream_python_apps/bindings/docstrings/


# RUN cd /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/bindings && \
#     rm -rf build && \
#     mkdir build && \
#     cd build && \
#     cmake .. -DPYTHON_MAJOR_VERSION=3 -DPYTHON_MINOR_VERSION=10 -DPIP_PLATFORM=linux_x86_64 -DDS_PATH=/opt/nvidia/deepstream/deepstream/ && \
#     make -j$(nproc) VERBOSE=1 > cmake_output.log 2>&1 && \
#     echo "CMake Output:" && cat cmake_output.log && \
#     echo "###########################" && \
#     echo "Installing built PyDS wheel" && \
#     echo "###########################" && \
#     pip3 install ./pyds-1.1.10-py3-none*.whl

RUN cd /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/bindings && \
    rm -rf build && \
    mkdir build

RUN cd /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/bindings/build && \
    # cmake .. -DPYTHON_MAJOR_VERSION=3 -DPYTHON_MINOR_VERSION=10 -DPIP_PLATFORM=linux_x86_64 -DDS_PATH=/opt/nvidia/deepstream/deepstream/
    cmake ..

RUN cd /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/bindings/build && \
    make -j$(nproc)
    

RUN pip3 install /opt/nvidia/deepstream/deepstream/sources/deepstream_python_apps/bindings/build/pyds-1.1.10-py3-none-linux_x86_64.whl


RUN apt remove -y libopencv-dev

RUN apt-get update --fix-missing

RUN apt-get update --fix-missing && \
    apt-get install -y libmysqlclient-dev
RUN apt-get install -y vlc libvlc-dev libvlccore-dev libeigen3-dev
RUN apt-get install -y autoconf libtool

RUN mkdir -p $DEPS_INSTALLED_DIR
WORKDIR $DEPS_INSTALLED_DIR

WORKDIR $DEPS_INSTALLED_DIR
RUN mkdir -p /libs_installed    
WORKDIR /libs_installed

RUN wget https://curl.se/download/curl-7.81.0.tar.gz \
    && tar xzf curl-7.81.0.tar.gz \
    && cd curl-7.81.0 \
    && ./configure --with-openssl \
    && make \
    && make install \
    && cd .. \
    && rm -rf curl-7.81.0.tar.gz curl-7.81.0

# RUN wget --no-check-certificate https://www.cryptopp.com/cryptopp870.zip \
#     && mkdir cryptopp-src \
#     && cd cryptopp-src \
#     && unzip ../cryptopp870.zip \
#     && make \
#     && make install \
#     && cd .. \
#     && rm -rf cryptopp870.zip cryptopp-src

RUN curl -L -o cryptopp870.zip https://github.com/weidai11/cryptopp/releases/download/CRYPTOPP_8_7_0/cryptopp870.zip \
    && mkdir cryptopp-src \
    && cd cryptopp-src \
    && unzip ../cryptopp870.zip \
    && make \
    && make install \
    && cd .. \
    && rm -rf cryptopp870.zip cryptopp-src

RUN mkdir -p /opt/nvidia/deepstream/deepstream-6.4/sources/apps/my_app

WORKDIR $DEPS_INSTALLED_DIR
RUN mkdir -p $DEPS_INSTALLED_DIR/LibLicense
COPY ./liblicense $DEPS_INSTALLED_DIR/LibLicense

# Install Python 3.8 from the deadsnakes PPA
RUN apt-get update && apt-get install -y \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y \
    python3.8 \
    python3.8-dev \
    python3.8-distutils \
    && apt-get clean

# Install required packages without prompting for confirmation
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential cmake git python3-dev python3-numpy \
    libavcodec-dev libavformat-dev libswscale-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer1.0-dev libgtk-3-dev \
    libpng-dev libjpeg-dev libopenexr-dev libtiff-dev libwebp-dev \
    libopencv-dev x264 libx264-dev libssl-dev ffmpeg \
    && apt-get autoremove -y \
    && apt-get clean

# Install opencv-python using pip
RUN python -m pip install --no-binary opencv-python opencv-python

WORKDIR /usr/emotion-ds

